/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>



 #define _DEFAULT 0
 #define _ADJUST 1
 #define _NUM 2
 #define _SYMBOL 3
 #define _NAV 4

/ { 
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        ti: tapus_interuptus {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPUS_INTERUPTUS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };

        td_par: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LPAR>, <&kp RPAR>;
        };

        td_brc: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBRC>, <&kp RBRC>;
        };        

        td_brk: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        }; 

        td_ab: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LT>, <&kp GT>;
        };

        td_exlm: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp EXCL>, <&kp QMARK>;
        };

        td_quot: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_5";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SQT>, <&kp AT>;
        };

        td_unds: tap_dance_6 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_6";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp MINUS>, <&kp UNDER>;
        };        

        td_coln: tap_dance_7 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_7";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp COLON>, <&kp SEMI>;
        };

        td_slash: tap_dance_8 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_8";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SLASH>, <&kp BACKSLASH>;
        };

        td_curr: tap_dance_9 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_9";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp HASH>, <&kp DOLLAR>;
        };

        td_at: tap_dance_10 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_10";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DQT>, <&kp NUHS>;
        };            
    };
};


/ {
combos {
        compatible = "zmk,combos";
        combo_adjust_layer {
            timeout-ms = <50>;
            key-positions = <37 40>;
            bindings = <&mo _ADJUST>;
        };

        combo_default_layer {
            timeout-ms = <50>;
            key-positions = <38 39>;
            bindings = <&to _DEFAULT>;
        };

        combo_qw_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
    };
};        

/ {

keymap {
  compatible = "zmk,keymap";

        _DEFAULT {
        bindings = <
        &none  &kp Q &kp W &kp E &kp R &kp T                                &kp Y &kp U  &kp I  &kp O   &kp P  &none
        &none  &hm LGUI A &hm LSHIFT S &hm LCTRL D &hm LALT F &kp G         &kp H &hm RALT J  &hm RCTRL K &hm RSHIFT L &hm RGUI SINGLE_QUOTE  &none
        &none  &kp Z &kp X &kp C &kp V &kp B                                &kp N &kp M  &kp COMMA &kp DOT &td_slash  &none
        &lt _SYMBOL TAB  &lt _NAV DEL  &ti LSHFT BKSP                        &lt _SYMBOL SPACE &lt _NUM ESC &kp RET
        >;
        };


        _ADJUST {
        bindings = <
        &trans &trans  &kp F7  &kp F8  &kp F9  &kp F10                  &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3 &bt BT_SEL 4  &trans
        &trans &kp LALT  &kp F4  &kp F5  &kp F6  &kp F11                &trans &trans &trans  &trans &trans &trans
        &trans &trans  &kp F1 &kp F2 &kp F3 &kp F12                     &trans   &trans  &trans  &trans  &bt BT_CLR &trans
        &trans   &trans  &trans                                         &trans  &trans  &trans
        >;
        };


        _NUM {
        bindings = <
        &trans &kp PLUS   &kp N7  &kp N8  &kp N9  &kp MINUS          &td_par  &td_ab  &trans &trans  &trans  &trans
        &trans &kp FSLH   &kp N4  &kp N5  &kp N6  &kp KP_MULTIPLY    &td_brc  &kp RALT  &kp RCTRL &kp RSHIFT &kp RGUI &trans
        &trans &kp N0  &kp N1  &kp N2  &kp N3  &kp EQUAL             &td_brk  &trans &kp COMMA &kp DOT &td_slash &trans
        &trans   &trans  &trans                                      &trans  &trans  &trans
        >;
        }; 

        _SYMBOL {
        bindings = <
        &trans &kp PLUS   &kp GRAVE  &kp PIPE  &kp LS(NUBS)  &kp MINUS          &td_par  &td_ab  &td_exlm &td_at  &td_unds  &trans
        &trans &hm LGUI FSLH  &kp LSHIFT  &kp LCTRL  &kp LALT  &kp KP_MULTIPLY  &td_brc  &td_curr &kp PRCNT &td_coln &td_quot &trans
        &trans &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp EQUAL            &td_brk  &kp AMPS  &kp COMMA  &kp DOT  &td_slash &trans
        &trans   &trans  &trans                                                 &trans  &trans  &trans
        >;
        };        

        _NAV {
        bindings = <
        &trans &kp LC(A)  &kp GRAVE  &trans  &trans &trans                     &kp PAGE_UP  &kp LC(LEFT)  &kp UP &kp LC(RIGHT)  &kp LC(LA(DEL))  &trans
        &trans  &kp LGUI  &kp LSHIFT  &kp LCTRL  &kp LALT  &trans              &kp HOME  &kp LEFT &kp DOWN &kp RIGHT &kp END &trans
        &trans &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)           &kp PAGE_DOWN  &kp K_APP  &trans  &trans  &trans  &trans
        &trans  &trans  &trans                                                 &trans  &trans  &trans
        >;
        };
  };
};
